datasource db {
  provider = "sqlite"
  // url      = env("DATABASE_URL")
  url      = "file:C:/Users/Stoney/AppData/Local/NoMercy/data/config.db?socket_timeout=10&connection_limit=1&timeout=5000"
  // url      = "file:/home/stoney/.local/share/NoMercy/data/config.db?socket_timeout=10&connection_limit=1&timeout=5000"
}

generator client {
  provider      = "prisma-client-js"
  output        = "./client"
  binaryTargets = ["native"]
}

model Configuration {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String?
  modified_by String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Library {
  id                    String  @id @default(cuid())
  autoRefreshInterval   String
  chapterImages         Boolean
  extractChapters       Boolean
  extractChaptersDuring Boolean
  image                 String?
  perfectSubtitleMatch  Boolean
  realtime              Boolean
  specialSeasonName     String
  title                 String
  type                  String
  country               String
  language              String
  blurHash              String?
  colorPalette          String?

  Folders           LibraryFolder[]
  Metadata          Metadata[]
  SubtitleLanguages SubtitleLanguage[]
  EncoderProfiles   EncoderProfileLibrary[]
  User              LibraryUser[]
  File              File[]

  Tv    Tv[]
  Movie Movie[]

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  Collection Collection[]
  Special    Special[]
  Artist     Artist[]
  Album      Album[]
}

model EncoderProfileLibrary {
  libraryId String
  Library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  encoderProfileId String
  EncoderProfile   EncoderProfile @relation(fields: [encoderProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([libraryId, encoderProfileId])
  @@unique([libraryId, encoderProfileId])
  @@index([encoderProfileId])
}

model EncoderProfile {
  id        String @id @default(cuid())
  name      String @unique
  container String
  param     String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  Libraries EncoderProfileLibrary[]
}

model SubtitleLanguage {
  libraryId String
  library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  languageId Int
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([libraryId, languageId])
  @@index([languageId])
}

model Language {
  id           Int     @id @default(autoincrement())
  iso_639_1    String  @unique
  english_name String
  name         String?

  Subtitles SubtitleLanguage[]
}

model Metadata {
  id        String     @id @default(cuid())
  title     String
  Provider  Provider[]
  library   Library?   @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  libraryId String?
}

model LibraryFolder {
  libraryId String
  library   Library? @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  folderId String
  folder   Folder? @relation(fields: [folderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([libraryId, folderId])
  @@index([folderId])
}

model Folder {
  id   String @id @default(cuid())
  path String @unique

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  Libraries LibraryFolder[]
}

model Provider {
  id         String    @id @default(cuid())
  name       String
  value      String
  metadata   Metadata? @relation(fields: [metadataId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  metadataId String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model Country {
  id           Int    @id @default(autoincrement())
  iso31661     String @unique
  english_name String
  native_name  String
}

model ActivityLog {
  id   String   @id @default(cuid())
  type String
  time DateTime

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  deviceId String
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  sub_id String
  user   User   @relation(fields: [sub_id], references: [sub_id], onDelete: Cascade, onUpdate: Cascade)
}

model Device {
  id       String  @id @default(cuid())
  deviceId String
  title    String
  type     String
  version  String
  ip       String?

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  ActivityLog ActivityLog[]
}

model RunningTask {
  id    String @id @default(cuid())
  title String
  value Int
  type  String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

model LibraryUser {
  libraryId String
  library   Library? @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User?  @relation(fields: [userId], references: [sub_id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([libraryId, userId])
  @@index([userId])
}

model User {
  sub_id           String   @id
  email            String
  manage           Boolean? @default(false)
  owner            Boolean? @default(false)
  name             String
  allowed          Boolean? @default(true)
  audioTranscoding Boolean? @default(true)
  videoTranscoding Boolean? @default(true)
  noTranscoding    Boolean? @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  Libraries     LibraryUser[]
  Notifications UserNotification[]
  ActivityLog   ActivityLog[]
  UserData      UserData[]
}

model NotificationTypes {
  id     String  @id @default(cuid())
  name   String  @unique
  manage Boolean

  Users UserNotification[]
}

model UserNotification {
  notificationId String
  notification   NotificationTypes @relation(fields: [notificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [sub_id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([notificationId, userId])
  @@index([userId])
}

model File {
  folder          String
  episodeNumber   Int?
  seasonNumber    Int?
  episodeFolder   String
  name            String
  extension       String
  year            Int?
  size            Float
  id              String    @unique @default(cuid())
  atimeMs         Float
  birthtimeMs     Float
  ctimeMs         Float
  edition         String?
  resolution      String?
  videoCodec      String?
  audioCodec      String?
  audioChannels   String?
  ffprobe         String?
  chapters        String?
  fullSeason      Boolean?
  gid             Float
  group           String?
  airDate         DateTime?
  multi           Boolean?
  complete        Boolean?
  isMultiSeason   Boolean?
  isPartialSeason Boolean?
  isSeasonExtra   Boolean?
  isSpecial       Boolean?
  isTv            Boolean?
  languages       String
  mode            Float
  mtimeMs         Float
  nlink           Float
  path            String
  revision        String?
  seasonPart      Float?
  sources         String?
  title           String
  type            String
  uid             Float

  libraryId String
  Library   Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  albumId   String?
  Album     Album?   @relation(fields: [albumId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int?
  Movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  MediaAttachments MediaAttachments[]
  Mediastreams     Mediastreams[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([path, libraryId])
}

model MediaAttachments {
  ItemId     String @id @default(cuid())
  Type       Int
  Value      String
  CleanValue String

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ItemId, Type, CleanValue])
  @@index([Type, CleanValue, ItemId])
  @@index([Type, ItemId, Value])
}

model Mediastreams {
  ItemId                    String  @id @default(cuid())
  StreamIndex               Int
  StreamType                String
  Codec                     String
  Language                  String
  ChannelLayout             String
  Profile                   String
  AspectRatio               String
  Path                      String
  IsIntrlaced               Boolean
  BitRate                   Int
  Channels                  Int
  SampleRate                Int
  IsDefault                 Boolean
  IsForced                  Boolean
  IsExternal                Boolean
  Height                    Int
  Width                     Int
  AverageFrameRate          Int
  RealFrameRate             Int
  Level                     Int
  PixelFormat               String
  BitDepth                  Int
  IsAnamorphic              Boolean
  RefFrames                 Int
  CodecTag                  String
  Comment                   String
  NalLengthSize             String
  IsAvc                     Boolean
  Title                     String
  TimeBase                  String
  CodecTimeBase             String
  ColorPrimaries            String
  ColorSpace                String
  ColorTransfer             String
  DvVersionMajor            Int
  DvVersionMinor            Int
  DvProfile                 Int
  DvLevel                   Int
  RpuPresentFlag            Int
  ElPresentFlag             Int
  BlPresentFlag             Int
  DvBlSignalCompatibilityId Int
  KeyFrames                 String

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ItemId, StreamIndex])
}

model UserData {
  id                    String    @unique @default(cuid())
  rating                Float?
  played                Boolean?
  playCount             Int?
  isFavorite            Boolean?
  playbackPositionTicks BigInt?
  lastPlayedDate        DateTime?
  audio                 String?
  subtitle              String?
  subtitleType          String?
  time                  Int?

  sub_id String
  User   User   @relation(fields: [sub_id], references: [sub_id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movieId Int?
  Movie   Movie? @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  tvId Int?
  Tv   Tv?  @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  videoFileId Int?
  VideoFile   VideoFile? @relation(fields: [videoFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tvId, videoFileId, sub_id])
  @@unique([movieId, videoFileId, sub_id])
  @@index([tvId, movieId, videoFileId, sub_id])
}

model AlternativeTitles {
  id       Int    @id @default(autoincrement())
  iso31661 String
  title    String

  movieId Int?
  Movie   Movie? @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tvId    Int?
  Tv      Tv?    @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([iso31661, movieId], name: "alternative_titles_movie_unique")
  @@unique([iso31661, tvId], name: "alternative_titles_tv_unique")
  @@index([movieId], name: "alternative_titles_movie_index")
  @@index([tvId], name: "alternative_titles_tv_index")
}

model Cast {
  id    Int    @id @default(autoincrement())
  Roles Role[]

  imageId String?
  Image   Image?  @relation(fields: [imageId], references: [id])

  personId Int
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  movieId   Int?
  Movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tvId      Int?
  Tv        Tv?      @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId  Int?
  Season    Season?  @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([personId, movieId])
  @@unique([personId, tvId])
  @@unique([personId, seasonId])
  @@unique([personId, episodeId])
}

model Role {
  id           Int    @id @default(autoincrement())
  creditId     String
  character    String
  episodeCount Int?

  castId    Int?
  Cast      Cast?      @relation(fields: [castId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  guestId   Int?
  GuestStar GuestStar? @relation(fields: [guestId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([castId, creditId])
  @@unique([castId, guestId])
  @@index([creditId])
}

model Certification {
  id       Int    @id @default(autoincrement())
  iso31661 String
  meaning  String
  order    Int
  rating   String

  Movie CertificationMovie[]
  Tv    CertificationTv[]

  @@unique([rating, iso31661])
  @@index([id])
}

model CertificationMovie {
  iso31661 String

  certificationId Int
  Certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId         Int
  Movie           Movie         @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([movieId, iso31661])
  @@unique([movieId, iso31661])
  @@index([movieId])
}

model CertificationTv {
  iso31661 String

  certificationId Int
  Certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tvId            Int
  Tv              Tv            @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([tvId, iso31661])
  @@unique([tvId, iso31661])
  @@index([tvId])
}

model Creator {
  id Int @id @default(autoincrement())

  personId Int
  Person   Person @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  tvId Int?
  Tv   Tv?  @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([personId, tvId])
}

model Crew {
  id   Int   @id @default(autoincrement())
  Jobs Job[]

  personId Int
  Person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  movieId   Int?
  Movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tvId      Int?
  Tv        Tv?      @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId  Int?
  Season    Season?  @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId Int?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([personId, movieId])
  @@unique([personId, tvId])
  @@unique([personId, seasonId])
  @@unique([personId, episodeId])
}

model Job {
  id           Int    @id @default(autoincrement())
  creditId     String
  job          String
  episodeCount Int?

  crewId Int?
  Crew   Crew? @relation(fields: [crewId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([crewId, creditId])
  @@index([creditId])
}

model Episode {
  airDate        String?
  createdAt      DateTime @default(now())
  episodeNumber  Int
  id             Int      @id @unique
  imdbId         String?
  overview       String?
  productionCode String?
  seasonNumber   Int
  still          String?
  title          String
  tvdbId         Int?
  updatedAt      DateTime @updatedAt
  voteAverage    Float?
  voteCount      Int?
  blurHash       String?
  colorPalette   String?

  tvId     Int
  Tv       Tv     @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId Int
  Season   Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Cast        Cast[]
  Crew        Crew[]
  Special     SpecialItem[]
  VideoFile   VideoFile[]
  Media       Media[]
  GuestStar   GuestStar[]
  File        File[]
  Translation Translation[]

  @@index([id])
}

model GenreMovie {
  genreId Int
  Movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId Int
  Genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([genreId, movieId])
  @@unique([genreId, movieId], name: "genre_movie_unique")
  @@index([movieId])
}

model GenreTv {
  genreId Int
  Genre   Genre @relation(fields: [genreId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tvId    Int
  Tv      Tv    @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([genreId, tvId])
  @@unique([genreId, tvId], name: "genre_tv_unique")
  @@index([tvId])
}

model GuestStar {
  id    Int    @id @default(autoincrement())
  Roles Role[]

  personId Int
  Person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  episodeId Int
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([episodeId])
}

model Keyword {
  id        Int    @id @default(autoincrement())
  keywordId Int
  name      String

  Movie KeywordMovie[]
  Tv    KeywordTv[]

  @@unique([keywordId])
  @@index([keywordId])
}

model KeywordMovie {
  keywordId Int
  Keyword   Keyword @relation(fields: [keywordId], references: [keywordId], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int
  Movie     Movie   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([keywordId, movieId], name: "keyword_movie_unique")
  @@index([keywordId], name: "keyword_movie_index")
}

model KeywordTv {
  keywordId Int
  Keyword   Keyword @relation(fields: [keywordId], references: [keywordId], onDelete: Cascade, onUpdate: Cascade)
  tvId      Int
  Tv        Tv      @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([keywordId, tvId], name: "keyword_tv_unique")
  @@index([keywordId], name: "keyword_tv_index")
}

model Messages {
  body   String
  from   String
  id     Int     @id @default(autoincrement())
  image  String?
  notify Boolean @default(false)
  read   Boolean @default(false)
  title  String
  to     String
  type   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movie {
  id               Int      @id @default(autoincrement())
  title            String
  titleSort        String
  duration         String?
  show             Boolean  @default(false)
  folder           String?
  adult            Boolean  @default(false)
  backdrop         String?
  budget           Int?
  createdAt        DateTime @default(now())
  homepage         String?
  imdbId           String?
  originalTitle    String?
  originalLanguage String?
  overview         String?
  popularity       Float?
  poster           String?
  releaseDate      String
  revenue          Int?
  runtime          Int?
  status           String?
  tagline          String?
  trailer          String?
  tvdbId           Int?
  updatedAt        DateTime @updatedAt
  video            String?
  voteAverage      Float?
  voteCount        Int?
  blurHash         String?
  colorPalette     String?

  AlternativeTitles AlternativeTitles[]
  Cast              Cast[]
  Crew              Crew[]
  Certification     CertificationMovie[]
  Genre             GenreMovie[]
  SpecialItem       SpecialItem[]
  VideoFile         VideoFile[]
  Keyword           KeywordMovie[]
  Media             Media[]
  UserData          UserData[]

  libraryId String
  Library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  File      File[]

  RecommendationFrom Recommendation[]  @relation("movie_recommendation_from")
  RecommendationTo   Recommendation[]  @relation("movie_recommendation_to")
  SimilarFrom        Similar[]         @relation("movie_similar_from")
  SimilarTo          Similar[]         @relation("movie_similar_to")
  Translation        Translation[]
  CollectionFrom     Collection[]
  CollectionTo       CollectionMovie[]

  @@unique([id])
  @@index([id])
}

model Collection {
  backdrop     String? @unique
  id           Int     @id @default(autoincrement())
  overview     String?
  parts        Int?
  poster       String? @unique
  title        String
  titleSort    String
  blurHash     String?
  colorPalette String?

  movieId     Int
  Movie       Movie             @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Parts       CollectionMovie[]
  libraryId   String
  Library     Library           @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Translation Translation[]

  @@index([id])
}

model CollectionMovie {
  id           Int         @id @default(autoincrement())
  collectionId Int?
  Collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId      Int?
  Movie        Movie?      @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([collectionId, movieId])
  @@index([movieId])
}

model Genre {
  id   Int
  name String @unique()

  // Track MusicGenreTrack[]
  Movie GenreMovie[]
  Tv    GenreTv[]

  @@unique([id])
  @@index([id])
}

model Person {
  adult              Boolean   @default(false)
  alsoKnownAs        String?
  biography          String?
  birthday           String?
  createdAt          DateTime? @default(now())
  deathday           String?
  gender             Int       @default(0)
  homepage           String?
  id                 Int       @id @default(autoincrement())
  imdbId             String?
  knownForDepartment String?
  name               String?
  placeOfBirth       String?
  popularity         Float?
  profile            String?
  updatedAt          DateTime  @updatedAt
  blurHash           String?
  colorPalette       String?

  Cast        Cast[]
  Crew        Crew[]
  GuestStar   GuestStar[]
  Creator     Creator[]
  Media       Media[]
  Translation Translation[]

  @@index([id])
}

model Recommendation {
  backdrop     String?
  id           Int     @id @default(autoincrement())
  overview     String?
  poster       String?
  title        String
  titleSort    String
  blurHash     String?
  colorPalette String?

  mediaId     Int?
  tvFromId    Int?
  TvFrom      Tv?    @relation(fields: [tvFromId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "tv_recommendation_from")
  tvToId      Int?
  TvTo        Tv?    @relation(fields: [tvToId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "tv_recommendation_to")
  movieFromId Int?
  MovieFrom   Movie? @relation(fields: [movieFromId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "movie_recommendation_from")
  movieToId   Int?
  MovieTo     Movie? @relation(fields: [movieToId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "movie_recommendation_to")

  @@unique([tvFromId, mediaId])
  @@unique([movieFromId, mediaId])
  @@index([movieFromId, mediaId])
}

model Season {
  airDate      String?
  createdAt    DateTime? @default(now())
  episodeCount Int?
  id           Int       @id @unique
  overview     String?
  poster       String?
  seasonNumber Int
  title        String?
  updatedAt    DateTime  @updatedAt
  blurHash     String?
  colorPalette String?

  tvId Int
  Tv   Tv  @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  Cast        Cast[]
  Crew        Crew[]
  Episode     Episode[]
  Media       Media[]
  Translation Translation[]

  @@index([tvId])
}

model Similar {
  backdrop     String?
  id           Int     @id @default(autoincrement())
  overview     String?
  poster       String?
  title        String
  titleSort    String
  blurHash     String?
  colorPalette String?

  mediaId     Int?
  tvFromId    Int?
  TvFrom      Tv?    @relation(fields: [tvFromId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "tv_similar_from")
  tvToId      Int?
  TvTo        Tv?    @relation(fields: [tvToId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "tv_similar_to")
  movieFromId Int?
  MovieFrom   Movie? @relation(fields: [movieFromId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "movie_similar_from")
  movieToId   Int?
  MovieTo     Movie? @relation(fields: [movieToId], references: [id], onDelete: Cascade, onUpdate: Cascade, name: "movie_similar_to")

  @@unique([tvFromId, mediaId])
  @@unique([movieFromId, mediaId])
  @@index([movieFromId, mediaId])
}

model Special {
  backdrop     String?
  description  String?
  id           Int     @id @default(autoincrement())
  poster       String?
  title        String  @unique
  blurHash     String?
  colorPalette String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Item SpecialItem[]

  libraryId String
  Library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model SpecialItem {
  id    Int    @id @default(autoincrement())
  order Int
  type  String

  specialId Int?
  Special   Special? @relation(fields: [specialId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  episodeId Int?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int?
  Movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([episodeId])
  @@unique([movieId])
}

model Translation {
  biography   String?
  englishName String?
  homepage    String?
  id          Int     @id @default(autoincrement())
  iso31661    String
  iso6391     String
  name        String?
  overview    String?
  title       String?

  tvId Int?
  Tv   Tv?  @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  seasonId Int?
  Season   Season? @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  episodeId Int?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  movieId Int?
  Movie   Movie? @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  collectionId Int?
  Collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  personId Int?
  Person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tvId, iso31661, iso6391])
  @@unique([seasonId, iso31661, iso6391])
  @@unique([episodeId, iso31661, iso6391])
  @@unique([movieId, iso31661, iso6391])
  @@unique([collectionId, iso31661, iso6391])
  @@unique([personId, iso31661, iso6391])
  @@index([seasonId, episodeId, movieId, personId])
}

model Tv {
  id               Int      @id @unique
  title            String
  titleSort        String
  haveEpisodes     Int?     @default(0)
  folder           String?
  backdrop         String?
  createdAt        DateTime @default(now())
  duration         Int?
  firstAirDate     String
  homepage         String?
  imdbId           String?
  inProduction     Boolean  @default(false)
  lastEpisodeToAir Int?
  lastAirDate      String?
  mediaType        String?
  nextEpisodeToAir Int?
  numberOfEpisodes Int?     @default(0)
  numberOfSeasons  Int?     @default(0)
  originCountry    String?
  originalLanguage String?
  overview         String?
  popularity       Float?
  poster           String?
  spokenLanguages  String?
  status           String?
  tagline          String?
  trailer          String?
  tvdbId           Int?
  type             String?
  updatedAt        DateTime @updatedAt
  voteAverage      Float?
  voteCount        Int?
  blurHash         String?
  colorPalette     String?

  AlternativeTitles AlternativeTitles[]
  Cast              Cast[]
  Crew              Crew[]
  Certification     CertificationTv[]
  Creator           Creator[]
  Episode           Episode[]
  Genre             GenreTv[]
  Keyword           KeywordTv[]
  Season            Season[]
  Media             Media[]
  UserData          UserData[]

  libraryId String
  Library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  RecommendationFrom Recommendation[] @relation("tv_recommendation_from")
  RecommendationTo   Recommendation[] @relation("tv_recommendation_to")
  SimilarFrom        Similar[]        @relation("tv_similar_from")
  SimilarTo          Similar[]        @relation("tv_similar_to")
  Translation        Translation[]

  @@index([id])
}

model VideoFile {
  duration   String?
  filename   String
  folder     String
  hostFolder String
  id         Int     @id @default(autoincrement())
  languages  String?
  quality    String?
  share      String  @default("Media")
  subtitles  String?
  Chapters   String?

  episodeId Int?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId   Int?
  Movie     Movie?   @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Media    Media[]
  UserData UserData[]

  @@unique([episodeId])
  @@unique([movieId])
}

model Image {
  id           String    @id @default(cuid())
  aspectRatio  Float?
  createdAt    DateTime? @default(now())
  height       Int?
  iso6391      String?
  name         String?
  site         String?
  size         Int?
  filePath     String
  type         String?
  updatedAt    DateTime  @updatedAt
  width        Int?
  voteAverage  Float?
  voteCount    Int?
  colorPalette String?
  blurHash     String?

  Cast Cast[]

  @@unique([site, type, filePath, width, height])
}

model Media {
  aspectRatio  Float?
  createdAt    DateTime? @default(now())
  height       Int?
  id           Int       @id @default(autoincrement())
  iso6391      String?
  name         String?
  site         String?
  size         Int?
  src          String
  type         String?
  updatedAt    DateTime  @updatedAt
  voteAverage  Float?
  voteCount    Int?
  width        Int?
  colorPalette String?
  blurHash     String?

  tvId Int?
  Tv   Tv?  @relation(fields: [tvId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  seasonId Int?
  Season   Season? @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  episodeId Int?
  Episode   Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  movieId Int?
  Movie   Movie? @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  personId Int?
  Person   Person? @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  videoFileId Int?
  VideoFile   VideoFile? @relation(fields: [videoFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([src], name: "media_unique_id")
}

model Artist {
  id           String  @id @default(cuid())
  name         String
  description  String?
  cover        String?
  folder       String?
  colorPalette String?
  blurHash     String?

  Album Album[]

  libraryId String
  Library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Track     Track[]
  trackId   String?

  @@index([id], name: "artist_id_index")
}

model Album {
  id           String  @id @default(cuid())
  name         String
  description  String?
  folder       String?
  cover        String?
  country      String?
  year         Int?
  tracks       Int?
  colorPalette String?
  blurHash     String?

  Track  Track[]
  Artist Artist[]
  File   File[]

  libraryId String
  Library   Library @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([id], name: "album_track_id_index")
}

model MusicGenre {
  id    String  @id @default(cuid())
  name  String?
  Track Track[]

  @@unique([name], name: "genre_track_name_unique")
  @@index([id], name: "genre_track_id_index")
}

model Track {
  id           String    @id @default(cuid())
  name         String
  track        Int?
  disc         Int?
  cover        String?
  date         DateTime?
  folder       String
  filename     String
  duration     String?
  quality      Int?
  path         String
  lyrics       String?
  colorPalette String?
  blurHash     String?

  MusicGenre    MusicGenre[]
  Album         Album[]
  Artist        Artist[]
  PlaylistTrack PlaylistTrack[]
  FavoriteTrack FavoriteTrack[]

  // @@unique([filename, path], name: "track_unique")
}

model Playlist {
  id           String  @id @default(cuid())
  userId       String
  name         String
  description  String?
  cover        String?
  colorPalette String?
  blurHash     String?

  PlaylistTrack PlaylistTrack[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([id, userId], name: "playlist_unique")
}

model PlaylistTrack {
  playlistId String
  trackId    String
  Playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([playlistId, trackId])
  @@unique([playlistId, trackId], name: "playlist_track_unique")
  @@index([trackId], name: "playlist_track_index")
}

model FavoriteTrack {
  trackId    String
  userId     String
  Track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([trackId, userId], name: "favorite_track_unique")
}
